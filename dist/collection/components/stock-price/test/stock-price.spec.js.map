{"version":3,"file":"stock-price.spec.js","sourceRoot":"","sources":["../../../../src/components/stock-price/test/stock-price.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { StockPrice } from '../stock-price';\n\ndescribe('StockPrice', () => {\n  let component: StockPrice;\n  let stockInput: HTMLInputElement;\n\n  beforeEach(() => {\n    component = new StockPrice();\n    component.fetchStockPrice = jest.fn();\n    stockInput = document.createElement('input');\n    stockInput.type = 'text';\n    stockInput.value = 'AA';\n    component.stockInput = stockInput;\n\n    global.fetch = jest.fn().mockImplementation(() => {\n      const response = {\n        ok: true,\n        json: () => Promise.resolve({\n          'Global Quote': {\n            '05. price': '180.57'\n          }\n        })\n      };\n      return Promise.resolve(response);\n    });\n  });\n\n  test('onUserInput - sets stockUserInput and stockInputValid when input is valid', () => {\n    const event = { target: { value: 'AAPL' } } as unknown as Event;\n    component.onUserInput(event);\n    expect(component.stockUserInput).toBe('AAPL');\n    expect(component.stockInputValid).toBe(true);\n  });\n\n  test('onUserInput - sets stockInputValid to false when input is empty', () => {\n    const event = { target: { value: '' } } as unknown as Event;\n    component.onUserInput(event);\n    expect(component.stockInputValid).toBe(false);\n  });\n\n  test('stockSymbolChanged - sets stockUserInput, stockInputValid, and fetches stock price when stockSymbol changes', () => {\n    const newValue = 'AAPL';\n    const oldValue = 'GOOG';\n    component.stockSymbolChanged(newValue, oldValue);\n    expect(component.stockUserInput).toBe(newValue);\n    expect(component.stockInputValid).toBe(true);\n    expect(component.fetchStockPrice).toHaveBeenCalledWith(newValue);\n  });\n\n  test('stockSymbolChanged - does not set stockUserInput, stockInputValid, or fetch stock price when stockSymbol does not change', () => {\n    const newValue = 'AAPL';\n    const oldValue = 'AAPL';\n    component.stockSymbolChanged(newValue, oldValue);\n    expect(component.stockUserInput).not.toBe(newValue);\n    expect(component.stockInputValid).not.toBe(true);\n    expect(component.fetchStockPrice).not.toHaveBeenCalled();\n  });\n\n  test('onFetchStockPrice - testing the event.preventDefault in the fetch stock price function ', () => {\n    const event = { preventDefault: jest.fn() } as unknown as Event;\n    component.onFetchStockPrice(event);\n    expect(component.stockSymbol).toBe(component.stockInput.value);\n  })\n\n  test('componentDidLoad - sets stockUserInput, stockInputValid, and fetches stock price when stockSymbol is present', () => {\n    component.stockSymbol = 'AAPL';\n    component.componentDidLoad();\n    expect(component.stockUserInput).toBe('AAPL');\n    expect(component.stockInputValid).toBe(true);\n    expect(component.fetchStockPrice).toHaveBeenCalledWith('AAPL');\n  });\n\n  test('componentDidLoad - sets stockUserInput, stockInputValid, and fetches stock price when stockSymbol is not present', () => {\n    component.stockSymbol = '';\n    component.componentDidLoad();\n    expect(component.stockUserInput).toBeUndefined();\n    expect(component.stockInputValid).toBe(false);\n    expect(component.fetchStockPrice).not.toHaveBeenCalled();\n  });\n\n  test('onStockSymbolSelected - updates stockSymbol when all the condition is valid', () => {\n    const event = new CustomEvent('ucSymbolSelected', { detail: 'AAPL' });\n    component.onStockSymbolSelected(event);\n    expect(component.stockSymbol).toBe(event.detail);\n  });\n\n  test('onStockSymbolSelected - updates stockSymbol when only 1 of the condition is valid - case 1: event.detail = null', () => {\n    const event = new CustomEvent('ucSymbolSelected', { detail: null });\n    component.onStockSymbolSelected(event);\n    expect(component.stockSymbol).toBeUndefined();\n  });\n\n  test('onStockSymbolSelected - updates stockSymbol when only 1 of the condition is valid - case 2: event.detail != null && event.detail == this.stockSymbol', () => {\n    const event = new CustomEvent('ucSymbolSelected', { detail: 'AAPL' });\n    component.stockSymbol = 'AAPL';\n    component.onStockSymbolSelected(event);\n    expect(component.stockSymbol).toBe('AAPL');\n  });\n\n  test('fetchStockPrice - API working when stockSymbol is valid', async() => {\n    const testPrice = await component.fetchStockPrice('AAPL');\n    console.log(component.fetchPrice);\n    expect(testPrice).toBe(180.57);\n    expect(component.error).toBeNull();\n    expect(component.loading).toBe(false);\n  })\n\n  test('fetchStockPrice - API give error when stockSymbol is invalid', async() => {\n    const testPrice = await component.fetchStockPrice('HDAGDSFHASFDHGAD');\n    console.log(component.fetchPrice);\n    expect(testPrice).toBeNull();\n    expect(component.error).not.toBeNull();\n    expect(component.loading).toBe(false);\n  })\n});\n"]}